/*## Создайте класс `Section`

Создайте класс `Section`, который отвечает за отрисовку элементов на странице. Этот класс:

- Первым параметром конструктора принимает объект с двумя свойствами: `items` и `renderer`. 
  Свойство `items` — это массив данных, которые нужно добавить на страницу при инициализации класса. 
  Свойство `renderer` — это функция, которая отвечает за создание и отрисовку данных на странице.
- Второй параметр конструктора — селектор контейнера, в который нужно добавлять созданные элементы.
- Содержит публичный метод, который отвечает за отрисовку всех элементов. Отрисовка каждого отдельного элемента должна осуществляться функцией `renderer`.
- Содержит публичный метод `addItem`, который принимает DOM-элемент и добавляет его в контейнер.

У класса `Section` нет своей разметки. Он получает разметку через функцию-колбэк и вставляет её в контейнер. 

См. тему "Создание нескольких классов в проекте - 8 спринт → Тема 3/8: ООП в интерфейсах 

Класс Section - это слой - не имеет представления. 
Поэтому при проектировании слоев важно 
исключать из методов любое упоминание о других классах. 
Любое взаимодействие с классом Card внутри Section почти исключает возможность слоя работать 
с данными, которые пришли не от Card. 
См. "Слои в проекте" 8 спринт → Тема 3/8: ООП в интерфейсах
*/

export default class Section {
  // Первым параметром конструктора принимает объект с двумя свойствами: `items` и `renderer`. 
  // Свойство `items` — это массив данных, которые нужно добавить на страницу при инициализации класса. 
  // Свойство `renderer` — это функция, которая отвечает за создание и отрисовку данных на странице.
  // Второй параметр конструктора — селектор контейнера, в который нужно добавлять созданные элементы.
  constructor({ renderer }, containerSelector) {
    //this._initialArray = items;
    this._renderer = renderer; // renderer — функция-колбэк, инструкция

    this._container = document.querySelector(containerSelector);
  }
  
  // Публичный метод, который отвечает за отрисовку всех элементов (6 карточек из массива) 
  // Отрисовка каждого отдельного элемента должна осуществляться функцией `renderer`
  /* Лучше массив карточек передавать не как параметр конструктора, а как параметр метода renderItems. 
  Это пригодится в следующем спринте, когда данные будут приходить с сервера и для их отображения 
  можно будет вызвать cardsSection.renderItems(cards); передав полученные данные 
  как параметр метода (ревью 1 ПР8)*/
  // P.S. Массив с карточками передадим в метод прямо в index.js - cardsList.renderItems(initialCards);
  renderItems(items) {
    // Перебираем массив данных _initialArray (данные 6-ти карточек из массива initialCards)
    items.forEach(item => this._renderer(item));  
  };
  
  // Публичный метод `addItem`, который принимает DOM-элемент и добавляет его в контейнер
  // Вся логика отрисовки элемента находится в методе addItem
  // P.S. Метод предназначен для добавления одной карточки при сабмите
  addItem(element, isPreppend = false) {
    isPreppend
    ? this._container.prepend(element)
    : this._container.append(element);
  }

  // Метод удаляет всё содержимое поля _container
  clear() {
    this._container.innerHTML = '';
  }
}